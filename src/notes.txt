ng-show="model.state"
ng-hide="model.state"
ng-src="model.property"
{{ value | filter:options }}
    filters:
        currency
        date:'MM/dd/yyyy @ h:mma(p)'
        uppercase / lowercase
        limitTo: 8
        orderBy: 'property' ('-property' for descending order)

ng-click="expression"
    Tabbed UI example:
        ng-click="tab = this.index"
        ng-show="tab === this.index"
        ng-class="{ active:tab === this.index }"
        ng-init="tab = 1"





 app.controller('PanelController', function() {
     this.tab = 1;
     this.setTab = function(setTab) {
        this.tab = setTab;
     };
     this.isSet = function(checkTab) {
        return this.tab === checkTab;
     };
 });

<div ng-controller="PanelController as panel">
<li ng-class="{active: this.isSet(model.index)}">
    <a href ng-click="panel.setTab(model.index)">Copy</a>
</li>




$scope.name = 'john';
$scope.formattedName = $filter('uppercase')($scope.name); ==> 'JOHN'


ng-include="<var name>"; i.e.: ng-include="'header.html'"




angular.module('app')
.factory('GithubSvc', function ($http) {
    return {
        fetchStories: function () {
            return $http.get('https://api.github.com/users')
        }
    }
})


<linearGradient id="linearGradient" x1="10%" y1="0" x2="0" y2="50%">
                <stop class="stop1" offset="0%" stop-color="black" />
                <stop class="stop2" offset="50%" stop-color="white" />
                <stop class="stop3" offset="100%" stop-color="white" />
            </linearGradient>


<feComposite in="SourceGraphic" in2="BackgroundImage" operator="arithmetic" k1="0" k2="0.5" k3="0.5" k4="-0.25" />
                <feColorMatrix type="hueRotate" values="{{$index * 20}}"/>


<svg version="1.1" id="Ebene_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 460 220" preserveAspectRatio="xMidYMid keep">

    <defs>
      <filter id="filter">
        <!-- COLORS -->
          <feFlood flood-color="#582D1B" result="COLOR-red"></feFlood>
        <!-- COLORS END -->

        <!-- FRACTAL TEXTURE -->
          <feTurbulence baseFrequency=".05,.004" top="-50%" type="fractalNoise" numOctaves="4" seed="0" result="FRACTAL-TEXTURE_10"></feTurbulence>
          <feColorMatrix type="matrix" values="0 0 0 0 0,
          0 0 0 0 0,
          0 0 0 0 0,
          0 0 0 -1.2 1.1" in="FRACTAL-TEXTURE_10" result="FRACTAL-TEXTURE_20"></feColorMatrix>
        <!-- FRACTAL TEXTURE END -->

        <!-- STROKE -->
          <feMorphology operator="dilate" radius="4" in="SourceAlpha" result="STROKE_10"></feMorphology>
        <!-- STROKE END -->

        <!-- EXTRUDED BEVEL -->
         <feConvolveMatrix order="8,8" divisor="1" kernelMatrix="1 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 1" in="STROKE_10" result="BEVEL_20"></feConvolveMatrix>

          <feOffset dx="4" dy="4" in="BEVEL_20" result="BEVEL_25"></feOffset>
          <feComposite operator="out" in="BEVEL_25" in2="STROKE_10" result="BEVEL_30"></feComposite>
          <feComposite in="COLOR-red" in2="BEVEL_30" operator="in" result="BEVEL_40"></feComposite>
          <feMerge result="BEVEL_50">
            <feMergeNode in="BEVEL_40"></feMergeNode>
            <feMergeNode in="SourceGraphic"></feMergeNode>
          </feMerge>
         <!-- EXTRUDED BEVEL END -->

        <feComposite in2="FRACTAL-TEXTURE_20" in="BEVEL_50" operator="in"></feComposite>
      </filter>
    </defs>

    <g class="filtered">
      <text x="0" y="200" transform="rotate(-12)">Petrol</text>
    </g>
</svg>

//background-image: url("data:image/svg+xml;utf8,<svg xmlns='http://www.w3.org/2000/svg' fill='currentColor' viewBox='0 0 64 64'><path d='M64 64 L64 16 C64 39 10 20 0 48 L0 64 Z' /></svg>");













	//&__item-path {
	//	display: inline-block;
	//	max-width: 75%;
	//
	//	transition: transform 0.3s, opacity 0.3s;
	//}
	//
	//
	//
	//@for $i from 0 through 7 {
	//	.color-list__item.index-#{$i} {
	//		$startRotation: ($i * 25) - 90;
	//		$endRotation: $i * 25;
	//
	//		.color-list__item-path {
	//			transform: rotate(#{$endRotation}deg) scale(1);
	//
	//			&.ng-enter,
	//			&.ng-leave {
	//				opacity: 0;
	//				transform: rotate(-#{$startRotation}deg) scale(0.1);
	//
	//			}
	//
	//			&.ng-enter.ng-enter-active,
	//			&.ng-leave.ng-leave-active {
	//				opacity: 1;
	//				transform: rotate(#{$endRotation}deg) scale(1);
	//			}
	//		}
	//	}
	//}




	//@for $i from 1 through 9 {
    //	$currentHeight: 100 / $i;
    //	.list-length-#{$i} .color-list__item {
    //		border-radius: 50%;
    //		height: #{$currentHeight}vh;
    //		width: 100%;
    //	}
    //}

############################################################################################
########################   SVG   ########################
############################################################################################

------------------ ### Specular Lighting on Text ### ------------------
<!--We create a heightmap by blurring the source: -->

<feGaussianBlur stdDeviation="5" in="SourceAlpha" result="BLUR"/>

<!-- We then define a lighting effect with a point light that is positioned at virtual 3D coordinates x: 40px, y: -30px, z: 200px: -->

<feSpecularLighting surfaceScale="6" specularConstant="1" specularExponent="30" lighting-color="#white" in="BLUR" result="SPECULAR">
    <fePointLight x="40" y="-30" z="200" />
</feSpecularLighting>

<!-- We cut off the parts that overlap the source graphic… -->

<feComposite operator="in" in="SPECULAR" in2="SourceAlpha" result="COMPOSITE"/>

<!-- … and then merge source graphic and lighting effect: -->

<feMerge>
    <feMergeNode in="SourceGraphic" />
    <feMergeNode in="COMPOSITE"/>
</feMerge>